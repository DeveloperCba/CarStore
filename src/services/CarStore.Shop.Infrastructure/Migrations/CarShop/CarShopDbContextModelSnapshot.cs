// <auto-generated />
using System;
using CarStore.Shop.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarStore.Shop.Infrastructure.Migrations.CarShop
{
    [DbContext(typeof(CarShopDbContext))]
    partial class CarShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7e88a2f-f1d3-469b-b8b4-5db97ace8b8d"),
                            CreatedAt =DateTime.Now,
                            Name = "Volkswagen",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("776e8069-9d90-470e-82aa-e732a4383863"),
                            CreatedAt = DateTime.Now,
                            Name = "Toyota",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("6283e743-3197-4e9f-a72a-aaa9f1d092e9"),
                            CreatedAt = DateTime.Now,
                            Name = "Ford",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("5cffedf3-a8b6-46f9-a0d2-9410e43cad99"),
                            CreatedAt = DateTime.Now,
                            Name = "Honda",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("10b4c883-eb89-4a88-945b-38aa2a1f0f8b"),
                            CreatedAt = DateTime.Now,
                            Name = "Hyundai",
                            Status = 0
                        });
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<int>("YearManufacturing")
                        .HasColumnType("integer");

                    b.Property<int>("YearModel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Model", (string)null);
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<int>("OwnerType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Owner", (string)null);
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Kilometer")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<Guid>("OwnerId")
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Renavam")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .IsUnique();

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Address", b =>
                {
                    b.HasOne("CarStore.Shop.Domain.Models.Owner", "Owner")
                        .WithOne("Address")
                        .HasForeignKey("CarStore.Shop.Domain.Models.Address", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Model", b =>
                {
                    b.HasOne("CarStore.Shop.Domain.Models.Vehicle", "Vehicle")
                        .WithOne("Model")
                        .HasForeignKey("CarStore.Shop.Domain.Models.Model", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Owner", b =>
                {
                    b.OwnsOne("CarStore.Shop.Domain.Validations.Documents.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(254)
                                .IsUnicode(false)
                                .HasColumnType("character varying")
                                .HasColumnName("Email");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owner");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("CarStore.Shop.Domain.Models.Brand", "Brand")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarStore.Shop.Domain.Models.Vehicle", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarStore.Shop.Domain.Models.Owner", "Owner")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarStore.Shop.Domain.Models.Vehicle", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Brand", b =>
                {
                    b.Navigation("Vehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Owner", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Vehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("CarStore.Shop.Domain.Models.Vehicle", b =>
                {
                    b.Navigation("Model")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
